索引操作:
    创建索引:
        请求: PUT http://127.0.0.1:9200/索引名
        响应:
            acknowledged: 响应结果
            shards_acknowledged: 分片结果
            index: 索引名称
    查看所有索引:
        请求: GET http://127.0.0.1:9200/_cat/indices?v
        响应:
            health: 当前服务器健康状态, green(集群完整) yellow(单点正常、集群不完整) red(单点不正常)
            status: 索引打开、关闭状态
            index: 索引名
            uuid: 索引统一编号
            pri: 主分片数量
            rep: 副本数量
            docs.count: 可用文档数量
            docs.deleted: 文档删除状态（逻辑删除）
            store.size: 主分片和副分片整体占空间大小
            pri.store.size: 主分片占空间大小
    查看单个索引:
        请求: GET http://127.0.0.1:9200/索引名
    删除单个索引:
        请求: DELETE http://127.0.0.1:9200/索引名
文档操作:
    创建文档:
        新增, 生成随机ID
            POST http://127.0.0.1:9200/shopping/_doc
        新增或更新, 重复执行更新记录并修改版本号, 可使用PUT
            POST/PUT http://127.0.0.1:9200/shopping/_doc/指定ID
    查看文档:
        GET http://127.0.0.1:9200/shopping/_doc/1
    修改文档:
        POST/PUT http://127.0.0.1:9200/shopping/_doc/指定ID
    修改字段:
        POST http://127.0.0.1:9200/shopping/_update/指定ID
        {
            "doc": {
                "price": 3000.00
            }
        }
    删除文档:
        DELETE http://127.0.0.1:9200/shopping/_doc/指定ID
            --> 删除一个文档不会立即从磁盘上移除，它只是被标记成已删除(逻辑删除)
            --> 重复删除version会递增, 对数据的任意操作都会导致version更新
            --> 首次删除result为deleted, 重复操作为not_found
    条件删除文档:
        请求: POST http://127.0.0.1:9200/shopping/_delete_by_query
        参数:
            {
                "query": {
                    "match": {
                        "price": 4000.00
                    }
                }
            }
        响应:
            took 耗时
            timed_out 是否超时
            total 总数
            deleted 删除数量
映射操作: (映射相当于表结构)
    创建映射:
        请求: PUT http://127.0.0.1:9200/student/_mapping
            --> 需要先创建索引
        参数:
            type:
                String: 字符串, text可分词, keyword不可分词
                Numerical: 数值类型
                    基本数据类型 long、integer、short、byte、double、float、half_float
                    浮点数的高精度类型 scaled_float
                Date: 日期类型
                Array: 数组类型
                Object: 对象
            index: 是否索引, 默认为true
            store: 是否将数据进行独立存储, 默认为 false
                 原始的文本会存储在_source里面, 默认情况下其他提取出来的字段是从_source 里面提取出来的
                 获取独立存储的字段要比从_source中解析快得多, 但是也会占用更多的空间
            analyzer: 分词器
            {
                "properties": {
                    "name": {
                        "type": "text",
                        "index": true
                    },
                    "sex": {
                        "type": "text",
                        "index": false
                    },
                    "age": {
                        "type": "long",
                        "index": false
                    }
                }
            }
    查看映射:
        GET http://127.0.0.1:9200/索引名/_mapping
    // todo 索引映射关联:
         PUT http://127.0.0.1:9200/student1
         {
            "settings": {},
            "mappings": {...}
         }
    // todo 修改映射:
        https://blog.csdn.net/u012501054/article/details/124425969
高级查询:
    查询所有文档: GET http://127.0.0.1:9200/student/_search
        {
            "query": { # 代表一个查询对象, 里面可以有不同的查询属性
                "match_all": { # 查询类型 match_all match term range

                }
            }
        }
    匹配查询:
        {
            "query": {
                "match": {
                    "name":"zhangsan"
                }
            }
        }
    字段匹配查询:
        {
            "query": {
                "multi_match": { # 可以在多个字段中查询
                    "query": "zhangsan",
                    "fields": [
                        "name",
                        "nickname"
                    ]
                }
            }
        }
    关键字精确查询:
        {
            "query": {
                "term": { # 精确的关键词匹配查询, 不对查询条件进行分词 // todo 忽略大小写怎么弄
                    "name": {
                        "value": "zhangsan"
                    }
                }
            }
        }
    多关键字精确查询:
        {
            "query": {
                "terms": {
                    "name": [
                        "zhangsan",
                        "lisi"
                    ]
                }
            }
        }
    指定查询字段:
        {
            "_source": ["name", "nickname"],
            "query": {...}

        }
    // todo 分组统计怎么做? 按性别分组, 统计不同age个数, 统计age总和
